package thirdeye.thirdeye;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;

import java.io.File;
import java.io.IOException;
import java.util.Locale;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.hardware.Camera;
import android.media.AudioManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.view.KeyEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

import org.json.JSONException;
import org.json.JSONObject;


/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity implements TextToSpeech.OnInitListener, Camera.AutoFocusCallback,Camera.ShutterCallback,Camera.PictureCallback{

    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;

    /** "Hello World!" {@link View} generated by {@link #buildView()}. */
    private View mView;

    private TextToSpeech mTts;
    private int  MY_DATA_CHECK_CODE =123;

    @Override
    protected void onActivityResult(
            int requestCode, int resultCode, Intent data) {
        if (requestCode == MY_DATA_CHECK_CODE) {
            if (resultCode == TextToSpeech.Engine.CHECK_VOICE_DATA_PASS) {
                // success, create the TTS instance
                mTts = new TextToSpeech(this, this);
            } else {
                // missing data, install it
                Intent installIntent = new Intent();
                installIntent.setAction(
                        TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);
                startActivity(installIntent);
            }
        }
    }

    private static final String TAG = "MyActivity";


    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        //mView = buildView();

        /* All the camera interaction is here */
        snapPicture();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);

        Intent checkIntent = new Intent();
        checkIntent.setAction(TextToSpeech.Engine.ACTION_CHECK_TTS_DATA);
        startActivityForResult(checkIntent, MY_DATA_CHECK_CODE);


        //Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        //startActivityForResult(intent, 1);
    }

    @Override
    public void onAutoFocus(boolean b, Camera camera) {
        //camera.takePicture(this);
        return;
    }

    @Override
    public void onShutter() {
        /* This is where we put shutter sound */
        return;
    }

    @Override
    public void onPictureTaken(byte[] bytes, Camera camera) {
        /* Callback interface used to supply image data from a photo capture. */
        return;
    }

    private class PhotoAsyncTask extends AsyncTask<String, Void, JSONObject>{
        @Override
        protected JSONObject doInBackground(String... strings) {
            try {
                HttpResponse<JsonNode> response1 = Unirest.post("https://camfind.p.mashape.com/image_requests")
                        .header("X-Mashape-Key", "ShUTf8SqtjmshKYbArXXl2gL320Dp1cR03VjsnQpi8obslPzd1")
                        .field("image_request[language]", "en")
                        .field("image_request[locale]", "en_US")
                        .field("image_request[image]", new File(strings[0]))
                        .asJson();
                String token = response1.getBody().getObject().getString("token");
                String url = "https://camfind.p.mashape.com/image_responses/"+token;
                Log.i("MainActivity", "URL: " + url);
                String status = "not completed";
                HttpResponse<JsonNode> response2 = null;
                while(status.equals("not completed")) {
                    long millis = System.currentTimeMillis();
                    response2 = Unirest.get(url)
                            .header("X-Mashape-Key", "ShUTf8SqtjmshKYbArXXl2gL320Dp1cR03VjsnQpi8obslPzd1")
                            .asJson();
                    status = response2.getBody().getObject().getString("status");
                    Log.i("MainActivity", "JSONBody: " + response2.getBody());
                    Thread.sleep(1000 - millis % 1000);
                }
                return response2.getBody().getObject();
            } catch (UnirestException e) {
                e.printStackTrace();
                return null;
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                return null;
            }
        }
        @Override
        protected void onPostExecute(JSONObject jsonObject) {
            super.onPostExecute(jsonObject);
            try {
                mTts.speak(jsonObject.get("name").toString(), TextToSpeech.QUEUE_FLUSH, null);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
    }

    /* Camera stuff */

    protected void snapPicture(){
        Camera cam = Camera.open();
        Log.i("MainActivity", "Camera params: " + cam.getParameters());

        SurfaceHolder holder = new SurfaceView(this).getHolder();
        cam.startPreview();
        //cam.autoFocus(this);
        try {
            cam.setPreviewDisplay(holder);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    //////////////////////////////

    @Override
    protected void onResume() {
        super.onResume();
//        if (mCardScroller==null)
//        {
//            mCardScroller = new CardScrollView(this);
//        }
//        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
//        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText(R.string.hello_world);
        return card.getView();
    }

    @Override
    public void onInit(int i) {
        Log.i("MainActivity", "Works: " + i);
        mTts.setLanguage(Locale.US);
    }

    @Override
    protected void onDestroy()
    {
        super.onDestroy();
        if ( mTts != null)
        {
            mTts.stop();
            mTts.shutdown();
        }
    }
}
